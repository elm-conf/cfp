-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.UpdateUserPayload exposing (UserEdgeOptionalArguments, clientMutationId, query, user, userEdge)

import Api.Enum.UsersOrderBy
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.
-}
clientMutationId : SelectionSet (Maybe String) Api.Object.UpdateUserPayload
clientMutationId =
    Object.selectionForField "(Maybe String)" "clientMutationId" [] (Decode.string |> Decode.nullable)


{-| The `User` that was updated by this mutation.
-}
user : SelectionSet decodesTo Api.Object.User -> SelectionSet (Maybe decodesTo) Api.Object.UpdateUserPayload
user object_ =
    Object.selectionForCompositeField "user" [] object_ (identity >> Decode.nullable)


{-| Our root query field type. Allows us to run any query from our mutation payload.
-}
query : SelectionSet decodesTo RootQuery -> SelectionSet (Maybe decodesTo) Api.Object.UpdateUserPayload
query object_ =
    Object.selectionForCompositeField "query" [] object_ (identity >> Decode.nullable)


type alias UserEdgeOptionalArguments =
    { orderBy : OptionalArgument (List Api.Enum.UsersOrderBy.UsersOrderBy) }


{-| An edge for our `User`. May be used by Relay 1.

  - orderBy - The method to use when ordering `User`.

-}
userEdge : (UserEdgeOptionalArguments -> UserEdgeOptionalArguments) -> SelectionSet decodesTo Api.Object.UsersEdge -> SelectionSet (Maybe decodesTo) Api.Object.UpdateUserPayload
userEdge fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { orderBy = Absent }

        optionalArgs =
            [ Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Api.Enum.UsersOrderBy.toString |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "userEdge" optionalArgs object_ (identity >> Decode.nullable)
