-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (AuthenticateInput, AuthenticateInputOptionalFields, AuthenticateInputRequiredFields, RegisterInput, RegisterInputOptionalFields, RegisterInputRequiredFields, UpdateUserByIdInput, UpdateUserByIdInputOptionalFields, UpdateUserByIdInputRequiredFields, UpdateUserInput, UpdateUserInputOptionalFields, UpdateUserInputRequiredFields, UserCondition, UserConditionOptionalFields, UserPatch, UserPatchOptionalFields, buildAuthenticateInput, buildRegisterInput, buildUpdateUserByIdInput, buildUpdateUserInput, buildUserCondition, buildUserPatch, encodeAuthenticateInput, encodeRegisterInput, encodeUpdateUserByIdInput, encodeUpdateUserInput, encodeUserCondition, encodeUserPatch)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAuthenticateInput : AuthenticateInputRequiredFields -> (AuthenticateInputOptionalFields -> AuthenticateInputOptionalFields) -> AuthenticateInput
buildAuthenticateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, email = required.email, password = required.password }


type alias AuthenticateInputRequiredFields =
    { email : String
    , password : String
    }


type alias AuthenticateInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AuthenticateInput input object.
-}
type alias AuthenticateInput =
    { clientMutationId : OptionalArgument String
    , email : String
    , password : String
    }


{-| Encode a AuthenticateInput into a value that can be used as an argument.
-}
encodeAuthenticateInput : AuthenticateInput -> Value
encodeAuthenticateInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]


buildRegisterInput : RegisterInputRequiredFields -> (RegisterInputOptionalFields -> RegisterInputOptionalFields) -> RegisterInput
buildRegisterInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, name = required.name, email = required.email, password = required.password }


type alias RegisterInputRequiredFields =
    { name : String
    , email : String
    , password : String
    }


type alias RegisterInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RegisterInput input object.
-}
type alias RegisterInput =
    { clientMutationId : OptionalArgument String
    , name : String
    , email : String
    , password : String
    }


{-| Encode a RegisterInput into a value that can be used as an argument.
-}
encodeRegisterInput : RegisterInput -> Value
encodeRegisterInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "name", Encode.string input.name |> Just ), ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]


buildUpdateUserByIdInput : UpdateUserByIdInputRequiredFields -> (UpdateUserByIdInputOptionalFields -> UpdateUserByIdInputOptionalFields) -> UpdateUserByIdInput
buildUpdateUserByIdInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, patch = required.patch, id = required.id }


type alias UpdateUserByIdInputRequiredFields =
    { patch : UserPatch
    , id : Int
    }


type alias UpdateUserByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserByIdInput input object.
-}
type alias UpdateUserByIdInput =
    { clientMutationId : OptionalArgument String
    , patch : UserPatch
    , id : Int
    }


{-| Encode a UpdateUserByIdInput into a value that can be used as an argument.
-}
encodeUpdateUserByIdInput : UpdateUserByIdInput -> Value
encodeUpdateUserByIdInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "patch", encodeUserPatch input.patch |> Just ), ( "id", Encode.int input.id |> Just ) ]


buildUpdateUserInput : UpdateUserInputRequiredFields -> (UpdateUserInputOptionalFields -> UpdateUserInputOptionalFields) -> UpdateUserInput
buildUpdateUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, nodeId = required.nodeId, patch = required.patch }


type alias UpdateUserInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id
    , patch : UserPatch
    }


type alias UpdateUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserInput input object.
-}
type alias UpdateUserInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    , patch : UserPatch
    }


{-| Encode a UpdateUserInput into a value that can be used as an argument.
-}
encodeUpdateUserInput : UpdateUserInput -> Value
encodeUpdateUserInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.nodeId |> Just ), ( "patch", encodeUserPatch input.patch |> Just ) ]


buildUserCondition : (UserConditionOptionalFields -> UserConditionOptionalFields) -> UserCondition
buildUserCondition fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias UserConditionOptionalFields =
    { id : OptionalArgument Int }


{-| Type for the UserCondition input object.
-}
type alias UserCondition =
    { id : OptionalArgument Int }


{-| Encode a UserCondition into a value that can be used as an argument.
-}
encodeUserCondition : UserCondition -> Value
encodeUserCondition input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ) ]


buildUserPatch : (UserPatchOptionalFields -> UserPatchOptionalFields) -> UserPatch
buildUserPatch fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, name = Absent, isReviewer = Absent, createdAt = Absent, updatedAt = Absent }
    in
    { id = optionals.id, name = optionals.name, isReviewer = optionals.isReviewer, createdAt = optionals.createdAt, updatedAt = optionals.updatedAt }


type alias UserPatchOptionalFields =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , isReviewer : OptionalArgument Bool
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    , updatedAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Type for the UserPatch input object.
-}
type alias UserPatch =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , isReviewer : OptionalArgument Bool
    , createdAt : OptionalArgument Api.ScalarCodecs.Datetime
    , updatedAt : OptionalArgument Api.ScalarCodecs.Datetime
    }


{-| Encode a UserPatch into a value that can be used as an argument.
-}
encodeUserPatch : UserPatch -> Value
encodeUserPatch input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "name", Encode.string |> Encode.optional input.name ), ( "isReviewer", Encode.bool |> Encode.optional input.isReviewer ), ( "createdAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input.createdAt ), ( "updatedAt", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input.updatedAt ) ]
