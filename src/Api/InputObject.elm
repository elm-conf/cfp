-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (CreateUserInput, CreateUserInputOptionalFields, CreateUserInputRequiredFields, DeleteUserByIdInput, DeleteUserByIdInputOptionalFields, DeleteUserByIdInputRequiredFields, DeleteUserInput, DeleteUserInputOptionalFields, DeleteUserInputRequiredFields, RegisterInput, RegisterInputOptionalFields, RegisterInputRequiredFields, UpdateUserByIdInput, UpdateUserByIdInputOptionalFields, UpdateUserByIdInputRequiredFields, UpdateUserInput, UpdateUserInputOptionalFields, UpdateUserInputRequiredFields, UserCondition, UserConditionOptionalFields, UserInput, UserInputOptionalFields, UserInputRequiredFields, UserPatch, UserPatchOptionalFields, buildCreateUserInput, buildDeleteUserByIdInput, buildDeleteUserInput, buildRegisterInput, buildUpdateUserByIdInput, buildUpdateUserInput, buildUserCondition, buildUserInput, buildUserPatch, encodeCreateUserInput, encodeDeleteUserByIdInput, encodeDeleteUserInput, encodeRegisterInput, encodeUpdateUserByIdInput, encodeUpdateUserInput, encodeUserCondition, encodeUserInput, encodeUserPatch)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildCreateUserInput : CreateUserInputRequiredFields -> (CreateUserInputOptionalFields -> CreateUserInputOptionalFields) -> CreateUserInput
buildCreateUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, user = required.user }


type alias CreateUserInputRequiredFields =
    { user : UserInput }


type alias CreateUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateUserInput input object.
-}
type alias CreateUserInput =
    { clientMutationId : OptionalArgument String
    , user : UserInput
    }


{-| Encode a CreateUserInput into a value that can be used as an argument.
-}
encodeCreateUserInput : CreateUserInput -> Value
encodeCreateUserInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "user", encodeUserInput input.user |> Just ) ]


buildDeleteUserByIdInput : DeleteUserByIdInputRequiredFields -> (DeleteUserByIdInputOptionalFields -> DeleteUserByIdInputOptionalFields) -> DeleteUserByIdInput
buildDeleteUserByIdInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, id = required.id }


type alias DeleteUserByIdInputRequiredFields =
    { id : Int }


type alias DeleteUserByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteUserByIdInput input object.
-}
type alias DeleteUserByIdInput =
    { clientMutationId : OptionalArgument String
    , id : Int
    }


{-| Encode a DeleteUserByIdInput into a value that can be used as an argument.
-}
encodeDeleteUserByIdInput : DeleteUserByIdInput -> Value
encodeDeleteUserByIdInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "id", Encode.int input.id |> Just ) ]


buildDeleteUserInput : DeleteUserInputRequiredFields -> (DeleteUserInputOptionalFields -> DeleteUserInputOptionalFields) -> DeleteUserInput
buildDeleteUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, nodeId = required.nodeId }


type alias DeleteUserInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id }


type alias DeleteUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteUserInput input object.
-}
type alias DeleteUserInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    }


{-| Encode a DeleteUserInput into a value that can be used as an argument.
-}
encodeDeleteUserInput : DeleteUserInput -> Value
encodeDeleteUserInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.nodeId |> Just ) ]


buildRegisterInput : RegisterInputRequiredFields -> (RegisterInputOptionalFields -> RegisterInputOptionalFields) -> RegisterInput
buildRegisterInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, name = required.name, email = required.email, password = required.password }


type alias RegisterInputRequiredFields =
    { name : String
    , email : String
    , password : String
    }


type alias RegisterInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RegisterInput input object.
-}
type alias RegisterInput =
    { clientMutationId : OptionalArgument String
    , name : String
    , email : String
    , password : String
    }


{-| Encode a RegisterInput into a value that can be used as an argument.
-}
encodeRegisterInput : RegisterInput -> Value
encodeRegisterInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "name", Encode.string input.name |> Just ), ( "email", Encode.string input.email |> Just ), ( "password", Encode.string input.password |> Just ) ]


buildUpdateUserByIdInput : UpdateUserByIdInputRequiredFields -> (UpdateUserByIdInputOptionalFields -> UpdateUserByIdInputOptionalFields) -> UpdateUserByIdInput
buildUpdateUserByIdInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, patch = required.patch, id = required.id }


type alias UpdateUserByIdInputRequiredFields =
    { patch : UserPatch
    , id : Int
    }


type alias UpdateUserByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserByIdInput input object.
-}
type alias UpdateUserByIdInput =
    { clientMutationId : OptionalArgument String
    , patch : UserPatch
    , id : Int
    }


{-| Encode a UpdateUserByIdInput into a value that can be used as an argument.
-}
encodeUpdateUserByIdInput : UpdateUserByIdInput -> Value
encodeUpdateUserByIdInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "patch", encodeUserPatch input.patch |> Just ), ( "id", Encode.int input.id |> Just ) ]


buildUpdateUserInput : UpdateUserInputRequiredFields -> (UpdateUserInputOptionalFields -> UpdateUserInputOptionalFields) -> UpdateUserInput
buildUpdateUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals.clientMutationId, nodeId = required.nodeId, patch = required.patch }


type alias UpdateUserInputRequiredFields =
    { nodeId : Api.ScalarCodecs.Id
    , patch : UserPatch
    }


type alias UpdateUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateUserInput input object.
-}
type alias UpdateUserInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Api.ScalarCodecs.Id
    , patch : UserPatch
    }


{-| Encode a UpdateUserInput into a value that can be used as an argument.
-}
encodeUpdateUserInput : UpdateUserInput -> Value
encodeUpdateUserInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "nodeId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.nodeId |> Just ), ( "patch", encodeUserPatch input.patch |> Just ) ]


buildUserCondition : (UserConditionOptionalFields -> UserConditionOptionalFields) -> UserCondition
buildUserCondition fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias UserConditionOptionalFields =
    { id : OptionalArgument Int }


{-| Type for the UserCondition input object.
-}
type alias UserCondition =
    { id : OptionalArgument Int }


{-| Encode a UserCondition into a value that can be used as an argument.
-}
encodeUserCondition : UserCondition -> Value
encodeUserCondition input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ) ]


buildUserInput : UserInputRequiredFields -> (UserInputOptionalFields -> UserInputOptionalFields) -> UserInput
buildUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, isReviewer = Absent }
    in
    { id = optionals.id, name = required.name, isReviewer = optionals.isReviewer }


type alias UserInputRequiredFields =
    { name : String }


type alias UserInputOptionalFields =
    { id : OptionalArgument Int
    , isReviewer : OptionalArgument Bool
    }


{-| Type for the UserInput input object.
-}
type alias UserInput =
    { id : OptionalArgument Int
    , name : String
    , isReviewer : OptionalArgument Bool
    }


{-| Encode a UserInput into a value that can be used as an argument.
-}
encodeUserInput : UserInput -> Value
encodeUserInput input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "name", Encode.string input.name |> Just ), ( "isReviewer", Encode.bool |> Encode.optional input.isReviewer ) ]


buildUserPatch : (UserPatchOptionalFields -> UserPatchOptionalFields) -> UserPatch
buildUserPatch fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, name = Absent, isReviewer = Absent }
    in
    { id = optionals.id, name = optionals.name, isReviewer = optionals.isReviewer }


type alias UserPatchOptionalFields =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , isReviewer : OptionalArgument Bool
    }


{-| Type for the UserPatch input object.
-}
type alias UserPatch =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , isReviewer : OptionalArgument Bool
    }


{-| Encode a UserPatch into a value that can be used as an argument.
-}
encodeUserPatch : UserPatch -> Value
encodeUserPatch input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "name", Encode.string |> Encode.optional input.name ), ( "isReviewer", Encode.bool |> Encode.optional input.isReviewer ) ]
